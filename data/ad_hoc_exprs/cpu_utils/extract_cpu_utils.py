#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Script to extract cpu utilization values from mpstat log.

Usage: $0 MPSTAT_LOG_FILE

"""

from typing import List

import sys


CPU_LOG_INTERVAL_IN_SECS = 3

_KEY_IOWAITS = 'iowaits'
_KEY_IDLES = 'idles'


def main():
    cpu_idx = -1
    iowait_idx = -1
    idle_idx = -1

    cpu_utils = {_KEY_IOWAITS: [], _KEY_IDLES: []}
    core_iowaits = []
    core_idles = []

    def aggregate_res():
        if core_iowaits:
            cpu_utils[_KEY_IOWAITS].append(
                sum(core_iowaits) / len(core_iowaits))
            cpu_utils[_KEY_IDLES].append(
                sum(core_idles) / len(core_idles))

            core_iowaits.clear()
            core_idles.clear()

    with open(CPUSTAT_LOG_FILE, 'rt') as filep:
        for line in filep:
            if iowait_idx < 0 or idle_idx < 0:
                if '%iowait' in line:
                    headers = line.split()
                    cpu_idx = headers.index('CPU')
                    iowait_idx = headers.index('%iowait')
                    idle_idx = headers.index('%idle')
                continue

            if 'Average' in line:
                break

            line = line.strip()
            if not line:
                aggregate_res()
                continue

            comps = line.split()
            if comps[cpu_idx] in ['all', 'CPU']:
                continue

            if (CPU_NUMS and comps[cpu_idx] in CPU_NUMS) or not CPU_NUMS:
                core_iowaits.append(float(comps[iowait_idx]))
                core_idles.append(float(comps[idle_idx]))

        aggregate_res()

    with open('cpu_utils.csv', 'wt') as filep:
        filep.write('seconds,non-idle (%),utilization (%),\n')
        seconds = 0
        for idx in range(len(cpu_utils[_KEY_IOWAITS])):
            line = str(seconds) + ','
            line += str(100 - cpu_utils[_KEY_IDLES][idx]) + ','
            line += str(100 - cpu_utils[_KEY_IDLES][idx] -
                        cpu_utils[_KEY_IOWAITS][idx]) + ','
            filep.write(line + '\n')

            seconds += CPU_LOG_INTERVAL_IN_SECS


if __name__ == "__main__":
    NUM_ARGS = len(sys.argv)
    if NUM_ARGS < 2:
        print("""\
Usage: {} MPSTAT_LOG_FILE CPUS

MPSTAT_LOG_FILE:
    The log file generated by MPSTAT(1)

CPUS:
    Optional. The values of these CPU numbers are collected and used for
    calculation. By default it takes all the CPUs.
    (e.g. 2,3,5)
""".format(sys.argv[0]))
        exit(1)

    CPUSTAT_LOG_FILE = sys.argv[1]
    CPU_NUMS = []   # type: List[str]
    if NUM_ARGS == 3:
        CPU_NUMS = sys.argv[2].split(',')

    main()
